<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.test.dao.IGroupDAO">

	<!-- 카테고리 리스트 -->
	<select id="categoryList" resultType="com.test.dto.CategoryDTO">
		SELECT CATEGORY_CODE, CATEGORY_CONTENT, CATEGORY_IMAGE
		FROM TBL_CATEGORY
	</select>
	
	<!-- 관심지역 리스트 -->
	<select id="citytypelist" resultType="com.test.dto.CityTypeDTO">
		SELECT CITYPE_ID, CITY_NAME
		FROM CITY_TYPE
	</select>
	
	<!-- 그룹 만들기 프로시저 -->
	<parameterMap type="hashmap" id="groupMap">
		<parameter property="result" mode="OUT" jdbcType="INTEGER"	javaType="java.lang.Integer"/>
		<parameter property="member_id" mode="IN"  jdbcType="INTEGER"	javaType="java.lang.Integer"/>
		<parameter property="group_name" mode="IN"  jdbcType="VARCHAR"	javaType="java.lang.String"/>
		<parameter property="citype_id" mode="IN"  jdbcType="INTEGER"	javaType="java.lang.String"/>
		<parameter property="public_gr" mode="IN"  jdbcType="INTEGER"	javaType="java.lang.Integer"/>
		<parameter property="public_grl" mode="IN"  jdbcType="INTEGER"	javaType="java.lang.Integer"/>
		<parameter property="public_gra" mode="IN"  jdbcType="INTEGER"	javaType="java.lang.Integer"/>
		<parameter property="group_info" mode="IN"  jdbcType="VARCHAR"	javaType="java.lang.String"/>
	</parameterMap>

	<select id="addGroup" statementType="CALLABLE" parameterMap="groupMap">
		{ call GROUP_INSERT(?, ?, ?, ?, ?, ?, ?, ?) }
	</select>
	
	<!-- 태그 추가 -->
	<insert id="addTag" parameterType="java.util.HashMap">
		INSERT ALL
		<foreach collection="list" item="item" separator=" ">
		INTO GRTAG(GRTAG_ID, GRTAG_NAME, LGROUP_ID)
		VALUES (#{item.seq}, #{item.tagName}, #{item.groupId})
		</foreach>
		SELECT *
      	FROM DUAL
	</insert>
	<!-- 태그 시퀀스 -->
	
	<select id="groupSEQ" resultType="java.lang.Integer">
		SELECT GRTAGSEQ.NEXTVAL
		FROM DUAL
	</select>
	
	<!-- 카테고리 시퀀스 -->
	<select id="categorySEQ" resultType="java.lang.Integer">
		SELECT GRCATEGORYSEQ.NEXTVAL
		FROM DUAL
	</select>
	
	<!-- 카테고리 추가 -->
	<insert id="addCategory" parameterType="java.util.HashMap">
		INSERT ALL
		<foreach collection="list" item="item" separator=" ">
		INTO GRCATEGORY(GRCATEGORY_ID, CATEGORY_CODE, LGROUP_ID)
		VALUES (#{item.seq}, #{item.category_code}, #{item.groupId})
		</foreach>
		SELECT *
      	FROM DUAL
	</insert>
	
	<select id="getGroupInfo" resultType="com.test.dto.GroupDTO">
		SELECT  G.LGROUP_ID AS group_id
	      , G.GROUP_NAME AS group_name
	      , G.grauto_accept AS grauto_accept
	      , TO_CHAR(G.GROUP_CREDATE, 'YYYY-MM-DD') AS group_credate
	      , CT.CITY_NAME AS group_citypeName
	      , M.LMEMBER_ID AS member_id
	      , M.MEMBER_NAME AS member_name
        , M.MEMBER_REALID AS member_realId
        , MP.MBPROFILE_URL AS member_imageUrl
	      , (SELECT COUNT(*) FROM GRLIST GL1 WHERE GL1.LGROUP_ID = G.LGROUP_ID AND GL1.GRPOWER_ID IN (1, 2, 3)) AS group_memberCount
	      , (SELECT COUNT(*) FROM EVENT E1 WHERE E1.LGROUP_ID = G.LGROUP_ID AND SYSDATE >= E1.EVENT_DATE) AS group_eventCount
	      , GP.GRPROFILE_URL AS group_imageUrl
        , G.GROUP_INFO AS group_info
        , G.PUBLIC_GR AS public_gr 
        , G.PUBLIC_GRL AS public_grl
        , G.PUBLIC_GRA AS public_gra
		FROM TBL_GROUP G
		      LEFT OUTER JOIN GRLIST GL
		      ON G.LGROUP_ID = GL.LGROUP_ID AND GL.GRPOWER_ID = 1
		      LEFT OUTER JOIN MU_MEMBER M
		      ON GL.LMEMBER_ID = M.LMEMBER_ID
		      LEFT OUTER JOIN CITY_TYPE CT
		      ON G.CITYPE_ID = CT.CITYPE_ID
		      LEFT OUTER JOIN GRPROFILE GP
		      ON G.LGROUP_ID = GP.LGROUP_ID
          LEFT OUTER JOIN MBPROFILE MP
          ON M.LMEMBER_ID = MP.LMEMBER_ID
		WHERE G.LGROUP_ID = #{groupId}
	</select>
	
	<select id="getGroupTags" resultType="com.test.dto.TagDTO">
		SELECT GRTAG_ID AS tag_id, GRTAG_NAME AS tag_name
		FROM GRTAG
		WHERE LGROUP_ID = #{groupId}
		ORDER BY 1
	</select>
	
	<select id="getGroupCategorys" resultType="com.test.dto.CategoryDTO">
		SELECT GC.GRCATEGORY_ID AS CATEGORY_CODE, C.CATEGORY_CONTENT
		FROM GRCATEGORY GC
		    JOIN TBL_CATEGORY C
		    ON GC.CATEGORY_CODE = C.CATEGORY_CODE
		WHERE GC.LGROUP_ID = #{groupId}
		ORDER BY 1
	</select>
	
	<select id="getPreEventLists" resultType="com.test.dto.EventDTO">
		SELECT *
		FROM
		(    
		SELECT levent_id
			      ,event_name
			      ,lgroup_id
			      ,lgroup_name
			      ,evestatus_id
			      ,event_ymd
			      ,event_hm
			      ,city_name
			      ,event_place
			      ,loc_geolat
			      , loc_geolng
			      , attend_count
			      , event_maxattend
		        , ROWNUM AS NUMCOUNT
		        , event_date
				FROM VIEW_EVENTINFO
				WHERE lgroup_id = #{groupId} AND SYSDATE > event_date 
		)
		WHERE #{count} >= NUMCOUNT
	</select>
	
	<select id="getPosEventLists" resultType="com.test.dto.EventDTO">
		SELECT *
		FROM
		(    
		SELECT levent_id
			      ,event_name
			      ,lgroup_id
			      ,lgroup_name
			      ,evestatus_id
			      ,event_ymd
			      ,event_hm
			      ,city_name
			      ,event_place
			      ,loc_geolat
			      ,loc_geolng
			    , attend_count
			    , event_maxattend
		        , ROWNUM AS NUMCOUNT
		        , event_date
				FROM VIEW_EVENTINFO
				WHERE lgroup_id = #{groupId} AND event_date > SYSDATE
		)    
		WHERE #{count} >= NUMCOUNT
	</select>
	
	<select id="getGroupPower" resultType="String">
		SELECT GRPOWER_ID FROM GRLIST WHERE LGROUP_ID = #{groupId} AND LMEMBER_ID = #{target}
	</select>
	
	<select id="getEventLists" resultType="com.test.dto.EventDTO">
		SELECT levent_id
	      ,event_name
	      ,lgroup_id
	      ,lgroup_name
	      ,evestatus_id
	      ,event_ymd
	      ,event_hm
	      ,city_name
	      ,event_place
	      ,loc_geolat
	      ,loc_geolng
	      ,attend_count
	      ,event_maxattend
		FROM VIEW_EVENTINFO
		WHERE lgroup_id = #{groupId}
		ORDER BY event_ymd DESC, event_hm DESC
	</select>

	<select id="getGroupMember" resultType="com.test.dto.MemberDTO">
		SELECT lmember_id, member_admin, public_fri, public_grl, public_email, public_tel, public_br, citype_id ,member_realid, member_pw, member_email, member_name, member_tel, member_birth, member_gender, member_info, lgroup_id, grpower_id, grjoin_day, member_imageUrl, member_age
		FROM GRMEMBERINFO
		WHERE LGROUP_ID = #{groupId} AND GRPOWER_ID = #{powerId}
	</select>
	
	<insert id="InsertGroupMember">
		INSERT INTO GRLIST(GRLIST_ID, GRPOWER_ID, LGROUP_ID, LMEMBER_ID) VALUES(GRLISTSEQ.NEXTVAL, #{grpower}, #{groupId}, #{memberId})
	</insert>
	
	<update id="changeGroupMemberPower">
		UPDATE GRLIST
		SET GRPOWER_ID = #{grpower}
		WHERE LMEMBER_ID = #{memberId} AND LGROUP_ID = #{groupId}
	</update>
	
	<update id="singupchangeGroup">
		UPDATE TBL_GROUP
		SET GRAUTO_ACCEPT = #{singupVal}
		WHERE LGROUP_ID = #{groupId}
	</update>
	
	<select id="getGroupPublicList" resultType="com.test.dto.Public_DTO">
		SELECT GRPUBLIC_ID AS id, GRPUBLIC_NAME AS name
		FROM GRPUBLIC
	</select>
	
	<update id="changeGroupOption">
		UPDATE TBL_GROUP
		SET PUBLIC_GR= #{public_gr}, PUBLIC_GRL = #{public_grl}, PUBLIC_GRA = #{public_gra}
		WHERE LGROUP_ID= #{groupId}
	</update>
	
	<select id="getGroupBlackList" resultType="com.test.dto.MemberDTO">
		SELECT BG.BLACKGR_ID, BG.LGROUP_ID, BG.LUMEMBER_ID AS lmember_id, M.MEMBER_NAME, MPF.MBPROFILE_URL
		FROM TBL_GROUP G
		    JOIN BLACKGR BG
		    ON G.LGROUP_ID = BG.LGROUP_ID
		    JOIN MU_MEMBER M
		    ON BG.LUMEMBER_ID = M.LMEMBER_ID
		    LEFT OUTER JOIN MBPROFILE MPF
		    ON M.LMEMBER_ID = MPF.LMEMBER_ID
		WHERE BG.LGROUP_ID = #{groupId}
	</select>
	
	<delete id="removeGroupBlackList">
		DELETE
		FROM BLACKGR
		WHERE LGROUP_ID = #{groupId} AND LUMEMBER_ID = #{target}
	</delete>
	
	<parameterMap type="hashmap" id="memberMap">
		<parameter property="GROUP_ID" mode="IN" jdbcType="VARCHAR"	javaType="java.lang.String"/>
		<parameter property="TARGET_ID" mode="IN"  jdbcType="VARCHAR"	javaType="java.lang.String"/>
	</parameterMap>
	
	<update id="changeGroupMaster" statementType="CALLABLE" parameterMap="memberMap">
		{call CHNAGE_GROUPMASTER(?, ?)}
	</update>
	
	<update id="removeGroupMember">
		UPDATE GRLIST
		SET GRPOWER_ID = 5 , GRLEAVE_DAY = SYSDATE
		WHERE LGROUP_ID = #{groupId} AND LMEMBER_ID = #{target}
	</update>
	
	<insert id="insertGroupBlack">
		INSERT INTO BLACKGR (BLACKGR_ID, LGROUP_ID, LUMEMBER_ID, GRLIST_ID, BLACKGR_REASON) 
		VALUES(BLACKGRSEQ.NEXTVAL, #{groupId}, #{targetId}, (SELECT GRLIST_ID FROM GRLIST WHERE LMEMBER_ID = #{memberId} AND LGROUP_ID = #{groupId}) , #{blackText} )
	</insert>
	
	
	<select id="getGroupEventAlbums" resultType="com.test.dto.AlbumDTO">
		SELECT a.LALBUM_ID as lalbum_id, a.LEVENT_ID as levent_id, E.event_name as event_name, TO_CHAR(a.ALBUM_CREDATE, 'YYYY-MM-DD') as album_credate, M.LMEMBER_ID as lmember_id, M.MEMBER_NAME as member_name, epf.eveprofile_url as eveprofile_url
		FROM TBL_GROUP G
		    JOIN EVENT E
		    ON G.LGROUP_ID = E.LGROUP_ID
		    JOIN ALBUM A
		    ON E.LEVENT_ID = a.LEVENT_ID
		    JOIN GRLIST GL
		    ON A.GRLIST_ID = GL.GRLIST_ID
		    JOIN MU_MEMBER M
		    ON GL.LMEMBER_ID = M.LMEMBER_ID
        LEFT OUTER JOIN EVEPROFILE EPF
        ON e.levent_id = epf.levent_id
		WHERE G.LGROUP_ID = #{groupId, jdbcType=VARCHAR}
	</select>
	
	<select id="getGroupUsableCategorys" resultType="com.test.dto.CategoryDTO">
		SELECT c.category_code, c.category_content
		FROM tbl_category C
		    LEFT OUTER JOIN (SELECT CATEGORY_CODE FROM grcategory WHERE LGROUP_ID = #{groupId}) GC
		    ON GC.category_code = c.category_code
		WHERE GC.category_code IS NULL
	</select>
	
	<delete id="removeGroupCategory">
		DELETE
		FROM GRCATEGORY
		WHERE grcategory_id = #{target}
	</delete>
	
	<delete id="removeGroupTag">
		DELETE
		FROM GRTAG
		WHERE grtag_id = #{target}
	</delete>
	
	<insert id="addGroupCategory">
		INSERT INTO GRCATEGORY (grcategory_id, category_code, lgroup_id)
		VALUES(GRCATEGORYSEQ.NEXTVAL, #{target}, #{groupId})


	</insert>
	
	<insert id="addGroupTag">
		INSERT INTO GRTAG (grtag_id, grtag_name, lgroup_id)
		VALUES(GRTAGSEQ.NEXTVAL, #{target}, #{groupId})
	</insert>
	
	<update id="updateGroupSubject">
		UPDATE TBL_GROUP
		SET GROUP_NAME = #{target}
		WHERE LGROUP_ID = #{groupId}
	</update>
	
	<update id="updateGroupInfo">	
		UPDATE TBL_GROUP
		SET GROUP_INFO = #{target}
		WHERE LGROUP_ID = #{groupId}
	</update>
	
	<select id="getGroupAcceptAlbum" resultType="String">
		SELECT E.levent_id
		FROM EVENT E
    	LEFT OUTER JOIN ALBUM A
    	ON e.levent_id = A.levent_id
		WHERE A.lalbum_id IS NULL AND e.evestatus_id = 1 AND SYSDATE > e.event_date AND e.levent_id = #{eventId}
	</select>
	
	<select id="getGrlist" resultType="String">
		SELECT GRLIST_ID
		FROM GRLIST
		WHERE LGROUP_ID = #{groupId} AND LMEMBER_ID = #{target}
	</select>
	
	<update id="groupProfile">
		UPDATE GRPROFILE
	    SET GRPROFILE_URL = #{drag}
	    WHERE LGROUP_ID = #{groupId}
	</update>
	
	<select id="getGroupEventOk" resultType="String">
		SELECT LEVENT_ID
		FROM EVENT
		WHERE LGROUP_ID = #{groupId} AND LEVENT_ID = #{target}
	</select>
	
	<select id="getBlackGroupConfirm" resultType="String">
		SELECT NVL2((SELECT BG.BLACKGR_ID FROM BLACKGR BG WHERE M.LMEMBER_ID = BG.LUMEMBER_ID AND BG.LGROUP_ID = #{groupId}), '1', '0') AS BGCHECK
		FROM MU_MEMBER M
		WHERE M.LMEMBER_ID = #{target}
	</select>
	
	<!-- 이벤트 업데이트 -->
	<parameterMap type="hashmap" id="eventMap">
		<parameter property="event_id" mode="IN" jdbcType="INTEGER"	javaType="java.lang.String"/>
		<parameter property="event_name" mode="IN" jdbcType="VARCHAR"	javaType="java.lang.String"/>
		<parameter property="city_code" mode="IN" jdbcType="INTEGER"	javaType="java.lang.String"/>
		<parameter property="loc_geolat" mode="IN" jdbcType="VARCHAR"	javaType="java.lang.String"/>
		<parameter property="loc_geolng" mode="IN" jdbcType="VARCHAR"	javaType="java.lang.String"/>
		<parameter property="event_place" mode="IN" jdbcType="VARCHAR"	javaType="java.lang.String"/>
		<parameter property="event_info" mode="IN" jdbcType="VARCHAR"	javaType="java.lang.String"/>
		<parameter property="event_date" mode="IN" jdbcType="VARCHAR"	javaType="java.lang.String"/>
		<parameter property="event_minattend" mode="IN"  jdbcType="INTEGER"	javaType="java.lang.String"/>
		<parameter property="event_maxattend" mode="IN"  jdbcType="INTEGER"	javaType="java.lang.String"/>
		<parameter property="minm" mode="IN" jdbcType="INTEGER" javaType="java.lang.String"/>
		<parameter property="url" mode="IN" jdbcType="VARCHAR" javaType="java.lang.String"/>
		<parameter property="mbpublic" mode="IN" jdbcType="INTEGER" javaType="java.lang.String"/>
	</parameterMap>
            
	<select id="eventupdate" statementType="CALLABLE" parameterMap="eventMap">
		{ call EVENT_UPDATE(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) }
	</select>
	
	<select id="categoryupdate" resultType="java.lang.String">
		SELECT CATEGORY_CODE
		FROM EVECATEGORY
		WHERE LEVENT_ID = #{eventId}
	</select>

	<select id="group_List" resultType="com.test.dto.GroupDTO">
		SELECT * 
					 FROM(SELECT ROWNUM AS ROWNUMBER, G.* FROM 
					 (SELECT LGROUP_ID AS GROUP_ID, GROUP_NAME 
					 , (SELECT LMEMBER_ID FROM GRLIST WHERE GRPOWER_ID='1' AND LGROUP_ID=T.LGROUP_ID) AS member_id 
					 , (SELECT COUNT(*) FROM GRLIST WHERE LGROUP_ID=T.LGROUP_ID) AS group_memberCount 
					 , TO_CHAR(GROUP_CREDATE, 'YYYY-MM-DD') AS group_credate 
					 , (SELECT CITY_NAME FROM CITY_TYPE WHERE CITYPE_ID = T.CITYPE_ID) AS group_citypeName 
					 , (SELECT LISTAGG(CATEGORY_CONTENT, '/') WITHIN GROUP(ORDER BY LGROUP_ID) 
					    FROM VGRCAT WHERE LGROUP_ID=T.LGROUP_ID GROUP BY LGROUP_ID) AS group_category 
					 , (SELECT GRPUBLIC_NAME FROM GRPUBLIC WHERE T.PUBLIC_GR = GRPUBLIC_ID) AS public_gr
					  ,(SELECT COUNT(*)FROM EVENT WHERE LGROUP_ID=T.LGROUP_ID AND SYSDATE>EVENT_DATE) AS PAST_EVENT
					 ,(SELECT COUNT(*)FROM EVENT WHERE LGROUP_ID=T.LGROUP_ID AND EVENT_DATE>SYSDATE) AS FUTURE_EVENT
					,(SELECT (case when (max(EVENT_CREDATE) is null) then '없음' else TO_CHAR(max(EVENT_CREDATE),'YYYY-MM-DD') end ) FROM EVENT WHERE LGROUP_ID=T.LGROUP_ID) AS CURRENT_CREATE
 					,(SELECT (case when (max(EVENT_DATE) is null) then '없음' else TO_CHAR(max(EVENT_CREDATE),'YYYY-MM-DD') end ) FROM EVENT WHERE LGROUP_ID=T.LGROUP_ID) AS CURRENT_HOLD
					 ,(SELECT (CASE WHEN (SYSDATE-180>MAX(EVENT_CREDATE)   OR (SYSDATE-180>GROUP_CREDATE AND MAX(EVENT_CREDATE)IS NULL )) THEN '휴면' ELSE '활동' END)FROM EVENT   
					WHERE LGROUP_ID=T.LGROUP_ID) AS GRSTATUS_STOP
					 FROM TBL_GROUP T
					 <if test="GROUPNAME != null">
					 WHERE T.GROUP_NAME LIKE ('%' || #{GROUPNAME} || '%')
					 </if>
					 ORDER BY LGROUP_ID
					 )G) 
		 WHERE ROWNUMBER BETWEEN #{startPage} AND #{countPage}  
		 ORDER BY ROWNUMBER
		
	</select>


	<select id="groupCount"  resultType="java.lang.Integer">

		SELECT COUNT(*) FROM TBL_GROUP
		WHERE GROUP_NAME LIKE ('%' || #{groupName, jdbcType=VARCHAR} || '%')

	</select>
</mapper>